/*
* generated by Xtext
*/
grammar InternalDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.br.refactoring.xtext.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.br.refactoring.xtext.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.br.refactoring.xtext.services.DslGrammarAccess;

}

@parser::members {
 
 	private DslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClass
entryRuleClass 
:
{ before(grammarAccess.getClassRule()); }
	 ruleClass
{ after(grammarAccess.getClassRule()); } 
	 EOF 
;

// Rule Class
ruleClass
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassAccess().getGroup()); }
(rule__Class__Group__0)
{ after(grammarAccess.getClassAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRefactoring
entryRuleRefactoring 
:
{ before(grammarAccess.getRefactoringRule()); }
	 ruleRefactoring
{ after(grammarAccess.getRefactoringRule()); } 
	 EOF 
;

// Rule Refactoring
ruleRefactoring
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRefactoringAccess().getRenameFeatureParserRuleCall()); }
	ruleRenameFeature
{ after(grammarAccess.getRefactoringAccess().getRenameFeatureParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRenameFeature
entryRuleRenameFeature 
:
{ before(grammarAccess.getRenameFeatureRule()); }
	 ruleRenameFeature
{ after(grammarAccess.getRenameFeatureRule()); } 
	 EOF 
;

// Rule RenameFeature
ruleRenameFeature
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRenameFeatureAccess().getGroup()); }
(rule__RenameFeature__Group__0)
{ after(grammarAccess.getRenameFeatureAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRenameClass
entryRuleRenameClass 
:
{ before(grammarAccess.getRenameClassRule()); }
	 ruleRenameClass
{ after(grammarAccess.getRenameClassRule()); } 
	 EOF 
;

// Rule RenameClass
ruleRenameClass
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRenameClassAccess().getGroup()); }
(rule__RenameClass__Group__0)
{ after(grammarAccess.getRenameClassAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getClassParserRuleCall_0()); }
	ruleClass
{ after(grammarAccess.getTypeAccess().getClassParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getRefactoringParserRuleCall_1()); }
	ruleRefactoring
{ after(grammarAccess.getTypeAccess().getRefactoringParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getModelKeyword_0()); }

	'model' 

{ after(grammarAccess.getModelAccess().getModelKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNameAssignment_1()); }
(rule__Model__NameAssignment_1)
{ after(grammarAccess.getModelAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getImportsAssignment_2()); }
(rule__Model__ImportsAssignment_2)*
{ after(grammarAccess.getModelAccess().getImportsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getContainsAssignment_3()); }
(rule__Model__ContainsAssignment_3)*
{ after(grammarAccess.getModelAccess().getContainsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportingKeyword_0()); }

	'importing' 

{ after(grammarAccess.getImportAccess().getImportingKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURIAssignment_1()); }
(rule__Import__ImportURIAssignment_1)
{ after(grammarAccess.getImportAccess().getImportURIAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Class__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__0__Impl
	rule__Class__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getClassKeyword_0()); }

	'Class' 

{ after(grammarAccess.getClassAccess().getClassKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getNameAssignment_1()); }
(rule__Class__NameAssignment_1)
{ after(grammarAccess.getClassAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RenameFeature__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RenameFeature__Group__0__Impl
	rule__RenameFeature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameFeature__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRenameFeatureAccess().getRename_FeatureKeyword_0()); }

	'Rename_Feature' 

{ after(grammarAccess.getRenameFeatureAccess().getRename_FeatureKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RenameFeature__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RenameFeature__Group__1__Impl
	rule__RenameFeature__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameFeature__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRenameFeatureAccess().getNameAssignment_1()); }
(rule__RenameFeature__NameAssignment_1)
{ after(grammarAccess.getRenameFeatureAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RenameFeature__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RenameFeature__Group__2__Impl
	rule__RenameFeature__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameFeature__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRenameFeatureAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getRenameFeatureAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RenameFeature__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RenameFeature__Group__3__Impl
	rule__RenameFeature__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameFeature__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRenameFeatureAccess().getAllRefactoringsAssignment_3()); }
(rule__RenameFeature__AllRefactoringsAssignment_3)*
{ after(grammarAccess.getRenameFeatureAccess().getAllRefactoringsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RenameFeature__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RenameFeature__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameFeature__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRenameFeatureAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getRenameFeatureAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__RenameClass__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RenameClass__Group__0__Impl
	rule__RenameClass__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameClass__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRenameClassAccess().getRefactoring_RenameClassKeyword_0()); }

	'Refactoring_RenameClass' 

{ after(grammarAccess.getRenameClassAccess().getRefactoring_RenameClassKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RenameClass__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RenameClass__Group__1__Impl
	rule__RenameClass__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameClass__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRenameClassAccess().getNameAssignment_1()); }
(rule__RenameClass__NameAssignment_1)
{ after(grammarAccess.getRenameClassAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RenameClass__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RenameClass__Group__2__Impl
	rule__RenameClass__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameClass__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRenameClassAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getRenameClassAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RenameClass__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RenameClass__Group__3__Impl
	rule__RenameClass__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameClass__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRenameClassAccess().getClassToBeRenameKeyword_3()); }

	'classToBeRename' 

{ after(grammarAccess.getRenameClassAccess().getClassToBeRenameKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RenameClass__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RenameClass__Group__4__Impl
	rule__RenameClass__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameClass__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRenameClassAccess().getColonKeyword_4()); }

	':' 

{ after(grammarAccess.getRenameClassAccess().getColonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RenameClass__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RenameClass__Group__5__Impl
	rule__RenameClass__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameClass__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRenameClassAccess().getClassToBeRenameAssignment_5()); }
(rule__RenameClass__ClassToBeRenameAssignment_5)
{ after(grammarAccess.getRenameClassAccess().getClassToBeRenameAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RenameClass__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RenameClass__Group__6__Impl
	rule__RenameClass__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameClass__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRenameClassAccess().getNewNameKeyword_6()); }

	'newName' 

{ after(grammarAccess.getRenameClassAccess().getNewNameKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RenameClass__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RenameClass__Group__7__Impl
	rule__RenameClass__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameClass__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRenameClassAccess().getColonKeyword_7()); }

	':' 

{ after(grammarAccess.getRenameClassAccess().getColonKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RenameClass__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RenameClass__Group__8__Impl
	rule__RenameClass__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameClass__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRenameClassAccess().getNewNameAssignment_8()); }
(rule__RenameClass__NewNameAssignment_8)
{ after(grammarAccess.getRenameClassAccess().getNewNameAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RenameClass__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RenameClass__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameClass__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRenameClassAccess().getRightCurlyBracketKeyword_9()); }

	'}' 

{ after(grammarAccess.getRenameClassAccess().getRightCurlyBracketKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}























rule__Model__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ImportsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getImportsImportParserRuleCall_2_0()); }
	ruleImport{ after(grammarAccess.getModelAccess().getImportsImportParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ContainsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getContainsTypeParserRuleCall_3_0()); }
	ruleType{ after(grammarAccess.getModelAccess().getContainsTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportURIAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Class__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getClassAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RenameFeature__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRenameFeatureAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getRenameFeatureAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RenameFeature__AllRefactoringsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRenameFeatureAccess().getAllRefactoringsRenameClassParserRuleCall_3_0()); }
	ruleRenameClass{ after(grammarAccess.getRenameFeatureAccess().getAllRefactoringsRenameClassParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RenameClass__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRenameClassAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getRenameClassAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RenameClass__ClassToBeRenameAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRenameClassAccess().getClassToBeRenameClassCrossReference_5_0()); }
(
{ before(grammarAccess.getRenameClassAccess().getClassToBeRenameClassIDTerminalRuleCall_5_0_1()); }
	RULE_ID{ after(grammarAccess.getRenameClassAccess().getClassToBeRenameClassIDTerminalRuleCall_5_0_1()); }
)
{ after(grammarAccess.getRenameClassAccess().getClassToBeRenameClassCrossReference_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RenameClass__NewNameAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRenameClassAccess().getNewNameIDTerminalRuleCall_8_0()); }
	RULE_ID{ after(grammarAccess.getRenameClassAccess().getNewNameIDTerminalRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


